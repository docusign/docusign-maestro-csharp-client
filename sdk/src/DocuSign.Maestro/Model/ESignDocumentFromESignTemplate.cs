/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// ESignDocumentFromESignTemplate
    /// </summary>
    [DataContract]
    public partial class ESignDocumentFromESignTemplate :  IEquatable<ESignDocumentFromESignTemplate>, IValidatableObject
    {
        public ESignDocumentFromESignTemplate()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets FileExtension
        /// </summary>
        [DataMember(Name="fileExtension", EmitDefaultValue=false)]
        public DSWorkflowDocGenDocOutputFormat? FileExtension { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ESignDocumentFromESignTemplate" /> class.
        /// </summary>
        /// <param name="ESignTemplateId">ESignTemplateId (required).</param>
        /// <param name="FileExtension">FileExtension (required).</param>
        /// <param name="Name">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="Type">Type (required).</param>
        public ESignDocumentFromESignTemplate(string ESignTemplateId = default(string), DSWorkflowDocGenDocOutputFormat? FileExtension = default(DSWorkflowDocGenDocOutputFormat?), Object Name = default(Object), ESignDocumentTypesFromDSTemplate Type = default(ESignDocumentTypesFromDSTemplate))
        {
            // to ensure "ESignTemplateId" is required (not null)
            if (ESignTemplateId == null)
            {
                throw new InvalidDataException("ESignTemplateId is a required property for ESignDocumentFromESignTemplate and cannot be null");
            }
            else
            {
                this.ESignTemplateId = ESignTemplateId;
            }
            // to ensure "FileExtension" is required (not null)
            if (FileExtension == null)
            {
                throw new InvalidDataException("FileExtension is a required property for ESignDocumentFromESignTemplate and cannot be null");
            }
            else
            {
                this.FileExtension = FileExtension;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ESignDocumentFromESignTemplate and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ESignDocumentFromESignTemplate and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
        }
        
        /// <summary>
        /// Gets or Sets ESignTemplateId
        /// </summary>
        [DataMember(Name="eSignTemplateId", EmitDefaultValue=false)]
        public string ESignTemplateId { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Object Name { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ESignDocumentTypesFromDSTemplate Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ESignDocumentFromESignTemplate {\n");
            sb.Append("  ESignTemplateId: ").Append(ESignTemplateId).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ESignDocumentFromESignTemplate);
        }

        /// <summary>
        /// Returns true if ESignDocumentFromESignTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of ESignDocumentFromESignTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ESignDocumentFromESignTemplate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ESignTemplateId == other.ESignTemplateId ||
                    this.ESignTemplateId != null &&
                    this.ESignTemplateId.Equals(other.ESignTemplateId)
                ) && 
                (
                    this.FileExtension == other.FileExtension ||
                    this.FileExtension != null &&
                    this.FileExtension.Equals(other.FileExtension)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ESignTemplateId != null)
                    hash = hash * 59 + this.ESignTemplateId.GetHashCode();
                if (this.FileExtension != null)
                    hash = hash * 59 + this.FileExtension.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
