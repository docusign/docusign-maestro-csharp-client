/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DS Workflow Variable from a Variable
    /// </summary>
    [DataContract]
    public partial class DSWorkflowVariableFromVariable :  IEquatable<DSWorkflowVariableFromVariable>, IValidatableObject
    {
        public DSWorkflowVariableFromVariable()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSWorkflowVariableFromVariable" /> class.
        /// </summary>
        /// <param name="Key">Key (required).</param>
        /// <param name="PropertyName">PropertyName (required).</param>
        /// <param name="Source">Source (required).</param>
        /// <param name="StepId">StepId (required).</param>
        public DSWorkflowVariableFromVariable(string Key = default(string), string PropertyName = default(string), DSWorkflowVariableSourceTypesVariable Source = default(DSWorkflowVariableSourceTypesVariable), string StepId = default(string))
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for DSWorkflowVariableFromVariable and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            // to ensure "PropertyName" is required (not null)
            if (PropertyName == null)
            {
                throw new InvalidDataException("PropertyName is a required property for DSWorkflowVariableFromVariable and cannot be null");
            }
            else
            {
                this.PropertyName = PropertyName;
            }
            // to ensure "Source" is required (not null)
            if (Source == null)
            {
                throw new InvalidDataException("Source is a required property for DSWorkflowVariableFromVariable and cannot be null");
            }
            else
            {
                this.Source = Source;
            }
            // to ensure "StepId" is required (not null)
            if (StepId == null)
            {
                throw new InvalidDataException("StepId is a required property for DSWorkflowVariableFromVariable and cannot be null");
            }
            else
            {
                this.StepId = StepId;
            }
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name="propertyName", EmitDefaultValue=false)]
        public string PropertyName { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public DSWorkflowVariableSourceTypesVariable Source { get; set; }
        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name="stepId", EmitDefaultValue=false)]
        public string StepId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSWorkflowVariableFromVariable {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSWorkflowVariableFromVariable);
        }

        /// <summary>
        /// Returns true if DSWorkflowVariableFromVariable instances are equal
        /// </summary>
        /// <param name="other">Instance of DSWorkflowVariableFromVariable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSWorkflowVariableFromVariable other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.PropertyName == other.PropertyName ||
                    this.PropertyName != null &&
                    this.PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.StepId == other.StepId ||
                    this.StepId != null &&
                    this.StepId.Equals(other.StepId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.PropertyName != null)
                    hash = hash * 59 + this.PropertyName.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.StepId != null)
                    hash = hash * 59 + this.StepId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
