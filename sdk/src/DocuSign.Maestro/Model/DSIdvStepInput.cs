/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSIdvStepInput
    /// </summary>
    [DataContract]
    public partial class DSIdvStepInput :  IEquatable<DSIdvStepInput>, IValidatableObject
    {
        public DSIdvStepInput()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSIdvStepInput" /> class.
        /// </summary>
        /// <param name="BackgroundColorBranding">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="ExpectedFullName">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="RetryLimit">This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="TextColorBranding">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        public DSIdvStepInput(Object BackgroundColorBranding = default(Object), Object ExpectedFullName = default(Object), Object RetryLimit = default(Object), Object TextColorBranding = default(Object))
        {
            // to ensure "BackgroundColorBranding" is required (not null)
            if (BackgroundColorBranding == null)
            {
                throw new InvalidDataException("BackgroundColorBranding is a required property for DSIdvStepInput and cannot be null");
            }
            else
            {
                this.BackgroundColorBranding = BackgroundColorBranding;
            }
            // to ensure "ExpectedFullName" is required (not null)
            if (ExpectedFullName == null)
            {
                throw new InvalidDataException("ExpectedFullName is a required property for DSIdvStepInput and cannot be null");
            }
            else
            {
                this.ExpectedFullName = ExpectedFullName;
            }
            // to ensure "RetryLimit" is required (not null)
            if (RetryLimit == null)
            {
                throw new InvalidDataException("RetryLimit is a required property for DSIdvStepInput and cannot be null");
            }
            else
            {
                this.RetryLimit = RetryLimit;
            }
            // to ensure "TextColorBranding" is required (not null)
            if (TextColorBranding == null)
            {
                throw new InvalidDataException("TextColorBranding is a required property for DSIdvStepInput and cannot be null");
            }
            else
            {
                this.TextColorBranding = TextColorBranding;
            }
        }
        
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="backgroundColorBranding", EmitDefaultValue=false)]
        public Object BackgroundColorBranding { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="expectedFullName", EmitDefaultValue=false)]
        public Object ExpectedFullName { get; set; }
        /// <summary>
        /// This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="retryLimit", EmitDefaultValue=false)]
        public Object RetryLimit { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="textColorBranding", EmitDefaultValue=false)]
        public Object TextColorBranding { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSIdvStepInput {\n");
            sb.Append("  BackgroundColorBranding: ").Append(BackgroundColorBranding).Append("\n");
            sb.Append("  ExpectedFullName: ").Append(ExpectedFullName).Append("\n");
            sb.Append("  RetryLimit: ").Append(RetryLimit).Append("\n");
            sb.Append("  TextColorBranding: ").Append(TextColorBranding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSIdvStepInput);
        }

        /// <summary>
        /// Returns true if DSIdvStepInput instances are equal
        /// </summary>
        /// <param name="other">Instance of DSIdvStepInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSIdvStepInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackgroundColorBranding == other.BackgroundColorBranding ||
                    this.BackgroundColorBranding != null &&
                    this.BackgroundColorBranding.Equals(other.BackgroundColorBranding)
                ) && 
                (
                    this.ExpectedFullName == other.ExpectedFullName ||
                    this.ExpectedFullName != null &&
                    this.ExpectedFullName.Equals(other.ExpectedFullName)
                ) && 
                (
                    this.RetryLimit == other.RetryLimit ||
                    this.RetryLimit != null &&
                    this.RetryLimit.Equals(other.RetryLimit)
                ) && 
                (
                    this.TextColorBranding == other.TextColorBranding ||
                    this.TextColorBranding != null &&
                    this.TextColorBranding.Equals(other.TextColorBranding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackgroundColorBranding != null)
                    hash = hash * 59 + this.BackgroundColorBranding.GetHashCode();
                if (this.ExpectedFullName != null)
                    hash = hash * 59 + this.ExpectedFullName.GetHashCode();
                if (this.RetryLimit != null)
                    hash = hash * 59 + this.RetryLimit.GetHashCode();
                if (this.TextColorBranding != null)
                    hash = hash * 59 + this.TextColorBranding.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
