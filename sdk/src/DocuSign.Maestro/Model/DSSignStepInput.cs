/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSSignStepInput
    /// </summary>
    [DataContract]
    public partial class DSSignStepInput :  IEquatable<DSSignStepInput>, IValidatableObject
    {
        public DSSignStepInput()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSSignStepInput" /> class.
        /// </summary>
        /// <param name="Documents">A list of #/definitions/ESignDocuments. Each element is: ESignDocument Object. This object should be any of the following object models: [#/definitions/ESignDocumentFromPreviousStep, #/definitions/ESignDocumentFromESignTemplate] (required).</param>
        /// <param name="EmailBlurb">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression].</param>
        /// <param name="EmailSubject">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression].</param>
        /// <param name="IsEmbeddedSign">IsEmbeddedSign (required).</param>
        /// <param name="Signers">Signers (required).</param>
        public DSSignStepInput(List<Object> Documents = default(List<Object>), Object EmailBlurb = default(Object), Object EmailSubject = default(Object), bool? IsEmbeddedSign = default(bool?), List<ESignSigner> Signers = default(List<ESignSigner>))
        {
            // to ensure "Documents" is required (not null)
            if (Documents == null)
            {
                throw new InvalidDataException("Documents is a required property for DSSignStepInput and cannot be null");
            }
            else
            {
                this.Documents = Documents;
            }
            // to ensure "IsEmbeddedSign" is required (not null)
            if (IsEmbeddedSign == null)
            {
                throw new InvalidDataException("IsEmbeddedSign is a required property for DSSignStepInput and cannot be null");
            }
            else
            {
                this.IsEmbeddedSign = IsEmbeddedSign;
            }
            // to ensure "Signers" is required (not null)
            if (Signers == null)
            {
                throw new InvalidDataException("Signers is a required property for DSSignStepInput and cannot be null");
            }
            else
            {
                this.Signers = Signers;
            }
            this.EmailBlurb = EmailBlurb;
            this.EmailSubject = EmailSubject;
        }
        
        /// <summary>
        /// A list of #/definitions/ESignDocuments. Each element is: ESignDocument Object. This object should be any of the following object models: [#/definitions/ESignDocumentFromPreviousStep, #/definitions/ESignDocumentFromESignTemplate]
        /// </summary>
        /// <value>A list of #/definitions/ESignDocuments. Each element is: ESignDocument Object. This object should be any of the following object models: [#/definitions/ESignDocumentFromPreviousStep, #/definitions/ESignDocumentFromESignTemplate]</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Object> Documents { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="emailBlurb", EmitDefaultValue=false)]
        public Object EmailBlurb { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="emailSubject", EmitDefaultValue=false)]
        public Object EmailSubject { get; set; }
        /// <summary>
        /// Gets or Sets IsEmbeddedSign
        /// </summary>
        [DataMember(Name="isEmbeddedSign", EmitDefaultValue=false)]
        public bool? IsEmbeddedSign { get; set; }
        /// <summary>
        /// Gets or Sets Signers
        /// </summary>
        [DataMember(Name="signers", EmitDefaultValue=false)]
        public List<ESignSigner> Signers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSSignStepInput {\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  EmailBlurb: ").Append(EmailBlurb).Append("\n");
            sb.Append("  EmailSubject: ").Append(EmailSubject).Append("\n");
            sb.Append("  IsEmbeddedSign: ").Append(IsEmbeddedSign).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSSignStepInput);
        }

        /// <summary>
        /// Returns true if DSSignStepInput instances are equal
        /// </summary>
        /// <param name="other">Instance of DSSignStepInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSSignStepInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    this.EmailBlurb == other.EmailBlurb ||
                    this.EmailBlurb != null &&
                    this.EmailBlurb.Equals(other.EmailBlurb)
                ) && 
                (
                    this.EmailSubject == other.EmailSubject ||
                    this.EmailSubject != null &&
                    this.EmailSubject.Equals(other.EmailSubject)
                ) && 
                (
                    this.IsEmbeddedSign == other.IsEmbeddedSign ||
                    this.IsEmbeddedSign != null &&
                    this.IsEmbeddedSign.Equals(other.IsEmbeddedSign)
                ) && 
                (
                    this.Signers == other.Signers ||
                    this.Signers != null &&
                    this.Signers.SequenceEqual(other.Signers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                if (this.EmailBlurb != null)
                    hash = hash * 59 + this.EmailBlurb.GetHashCode();
                if (this.EmailSubject != null)
                    hash = hash * 59 + this.EmailSubject.GetHashCode();
                if (this.IsEmbeddedSign != null)
                    hash = hash * 59 + this.IsEmbeddedSign.GetHashCode();
                if (this.Signers != null)
                    hash = hash * 59 + this.Signers.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
