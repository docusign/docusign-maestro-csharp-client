/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSWorkflowReplaceExpression
    /// </summary>
    [DataContract]
    public partial class DSWorkflowReplaceExpression :  IEquatable<DSWorkflowReplaceExpression>, IValidatableObject
    {
        public DSWorkflowReplaceExpression()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSWorkflowReplaceExpression" /> class.
        /// </summary>
        /// <param name="NewText">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="OldText">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="Text">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="Type">Type (required).</param>
        public DSWorkflowReplaceExpression(Object NewText = default(Object), Object OldText = default(Object), Object Text = default(Object), DSWorkflowTransformationExpressionTypesReplaceExpression Type = default(DSWorkflowTransformationExpressionTypesReplaceExpression))
        {
            // to ensure "NewText" is required (not null)
            if (NewText == null)
            {
                throw new InvalidDataException("NewText is a required property for DSWorkflowReplaceExpression and cannot be null");
            }
            else
            {
                this.NewText = NewText;
            }
            // to ensure "OldText" is required (not null)
            if (OldText == null)
            {
                throw new InvalidDataException("OldText is a required property for DSWorkflowReplaceExpression and cannot be null");
            }
            else
            {
                this.OldText = OldText;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for DSWorkflowReplaceExpression and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for DSWorkflowReplaceExpression and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
        }
        
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="newText", EmitDefaultValue=false)]
        public Object NewText { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="oldText", EmitDefaultValue=false)]
        public Object OldText { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public Object Text { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public DSWorkflowTransformationExpressionTypesReplaceExpression Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSWorkflowReplaceExpression {\n");
            sb.Append("  NewText: ").Append(NewText).Append("\n");
            sb.Append("  OldText: ").Append(OldText).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSWorkflowReplaceExpression);
        }

        /// <summary>
        /// Returns true if DSWorkflowReplaceExpression instances are equal
        /// </summary>
        /// <param name="other">Instance of DSWorkflowReplaceExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSWorkflowReplaceExpression other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NewText == other.NewText ||
                    this.NewText != null &&
                    this.NewText.Equals(other.NewText)
                ) && 
                (
                    this.OldText == other.OldText ||
                    this.OldText != null &&
                    this.OldText.Equals(other.OldText)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NewText != null)
                    hash = hash * 59 + this.NewText.GetHashCode();
                if (this.OldText != null)
                    hash = hash * 59 + this.OldText.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
