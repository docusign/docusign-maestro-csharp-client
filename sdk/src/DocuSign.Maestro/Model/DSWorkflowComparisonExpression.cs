/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSWorkflowComparisonExpression
    /// </summary>
    [DataContract]
    public partial class DSWorkflowComparisonExpression :  IEquatable<DSWorkflowComparisonExpression>, IValidatableObject
    {
        public DSWorkflowComparisonExpression()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets ComparisonOperator
        /// </summary>
        [DataMember(Name="comparisonOperator", EmitDefaultValue=false)]
        public DSWorkflowComparisonOperatorTypes? ComparisonOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DSWorkflowComparisonExpression" /> class.
        /// </summary>
        /// <param name="ComparisonOperator">ComparisonOperator (required).</param>
        /// <param name="LeftOperand">This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation] (required).</param>
        /// <param name="RightOperand">This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation] (required).</param>
        /// <param name="Type">Type (required).</param>
        public DSWorkflowComparisonExpression(DSWorkflowComparisonOperatorTypes? ComparisonOperator = default(DSWorkflowComparisonOperatorTypes?), Object LeftOperand = default(Object), Object RightOperand = default(Object), DSWorkflowExpressionTypesComparisonExpression Type = default(DSWorkflowExpressionTypesComparisonExpression))
        {
            // to ensure "ComparisonOperator" is required (not null)
            if (ComparisonOperator == null)
            {
                throw new InvalidDataException("ComparisonOperator is a required property for DSWorkflowComparisonExpression and cannot be null");
            }
            else
            {
                this.ComparisonOperator = ComparisonOperator;
            }
            // to ensure "LeftOperand" is required (not null)
            if (LeftOperand == null)
            {
                throw new InvalidDataException("LeftOperand is a required property for DSWorkflowComparisonExpression and cannot be null");
            }
            else
            {
                this.LeftOperand = LeftOperand;
            }
            // to ensure "RightOperand" is required (not null)
            if (RightOperand == null)
            {
                throw new InvalidDataException("RightOperand is a required property for DSWorkflowComparisonExpression and cannot be null");
            }
            else
            {
                this.RightOperand = RightOperand;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for DSWorkflowComparisonExpression and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
        }
        
        /// <summary>
        /// This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]
        /// </summary>
        /// <value>This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]</value>
        [DataMember(Name="leftOperand", EmitDefaultValue=false)]
        public Object LeftOperand { get; set; }
        /// <summary>
        /// This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]
        /// </summary>
        /// <value>This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]</value>
        [DataMember(Name="rightOperand", EmitDefaultValue=false)]
        public Object RightOperand { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public DSWorkflowExpressionTypesComparisonExpression Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSWorkflowComparisonExpression {\n");
            sb.Append("  ComparisonOperator: ").Append(ComparisonOperator).Append("\n");
            sb.Append("  LeftOperand: ").Append(LeftOperand).Append("\n");
            sb.Append("  RightOperand: ").Append(RightOperand).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSWorkflowComparisonExpression);
        }

        /// <summary>
        /// Returns true if DSWorkflowComparisonExpression instances are equal
        /// </summary>
        /// <param name="other">Instance of DSWorkflowComparisonExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSWorkflowComparisonExpression other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ComparisonOperator == other.ComparisonOperator ||
                    this.ComparisonOperator != null &&
                    this.ComparisonOperator.Equals(other.ComparisonOperator)
                ) && 
                (
                    this.LeftOperand == other.LeftOperand ||
                    this.LeftOperand != null &&
                    this.LeftOperand.Equals(other.LeftOperand)
                ) && 
                (
                    this.RightOperand == other.RightOperand ||
                    this.RightOperand != null &&
                    this.RightOperand.Equals(other.RightOperand)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ComparisonOperator != null)
                    hash = hash * 59 + this.ComparisonOperator.GetHashCode();
                if (this.LeftOperand != null)
                    hash = hash * 59 + this.LeftOperand.GetHashCode();
                if (this.RightOperand != null)
                    hash = hash * 59 + this.RightOperand.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
