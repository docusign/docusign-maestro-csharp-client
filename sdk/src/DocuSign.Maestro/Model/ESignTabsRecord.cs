/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// ESignTabsRecord
    /// </summary>
    [DataContract]
    public partial class ESignTabsRecord :  IEquatable<ESignTabsRecord>, IValidatableObject
    {
        public ESignTabsRecord()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ESignTabsRecord" /> class.
        /// </summary>
        /// <param name="DateSignedTabs">DateSignedTabs.</param>
        /// <param name="EmailAddressTabs">EmailAddressTabs.</param>
        /// <param name="FirstNameTabs">FirstNameTabs.</param>
        /// <param name="FullNameTabs">FullNameTabs.</param>
        /// <param name="LastNameTabs">LastNameTabs.</param>
        /// <param name="SignHereTabs">SignHereTabs.</param>
        /// <param name="TextTabs">TextTabs.</param>
        public ESignTabsRecord(List<ESignTabs> DateSignedTabs = default(List<ESignTabs>), List<ESignTabs> EmailAddressTabs = default(List<ESignTabs>), List<ESignTabs> FirstNameTabs = default(List<ESignTabs>), List<ESignTabs> FullNameTabs = default(List<ESignTabs>), List<ESignTabs> LastNameTabs = default(List<ESignTabs>), List<ESignTabs> SignHereTabs = default(List<ESignTabs>), List<ESignTabs> TextTabs = default(List<ESignTabs>))
        {
            this.DateSignedTabs = DateSignedTabs;
            this.EmailAddressTabs = EmailAddressTabs;
            this.FirstNameTabs = FirstNameTabs;
            this.FullNameTabs = FullNameTabs;
            this.LastNameTabs = LastNameTabs;
            this.SignHereTabs = SignHereTabs;
            this.TextTabs = TextTabs;
        }
        
        /// <summary>
        /// Gets or Sets DateSignedTabs
        /// </summary>
        [DataMember(Name="dateSignedTabs", EmitDefaultValue=false)]
        public List<ESignTabs> DateSignedTabs { get; set; }
        /// <summary>
        /// Gets or Sets EmailAddressTabs
        /// </summary>
        [DataMember(Name="emailAddressTabs", EmitDefaultValue=false)]
        public List<ESignTabs> EmailAddressTabs { get; set; }
        /// <summary>
        /// Gets or Sets FirstNameTabs
        /// </summary>
        [DataMember(Name="firstNameTabs", EmitDefaultValue=false)]
        public List<ESignTabs> FirstNameTabs { get; set; }
        /// <summary>
        /// Gets or Sets FullNameTabs
        /// </summary>
        [DataMember(Name="fullNameTabs", EmitDefaultValue=false)]
        public List<ESignTabs> FullNameTabs { get; set; }
        /// <summary>
        /// Gets or Sets LastNameTabs
        /// </summary>
        [DataMember(Name="lastNameTabs", EmitDefaultValue=false)]
        public List<ESignTabs> LastNameTabs { get; set; }
        /// <summary>
        /// Gets or Sets SignHereTabs
        /// </summary>
        [DataMember(Name="signHereTabs", EmitDefaultValue=false)]
        public List<ESignTabs> SignHereTabs { get; set; }
        /// <summary>
        /// Gets or Sets TextTabs
        /// </summary>
        [DataMember(Name="textTabs", EmitDefaultValue=false)]
        public List<ESignTabs> TextTabs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ESignTabsRecord {\n");
            sb.Append("  DateSignedTabs: ").Append(DateSignedTabs).Append("\n");
            sb.Append("  EmailAddressTabs: ").Append(EmailAddressTabs).Append("\n");
            sb.Append("  FirstNameTabs: ").Append(FirstNameTabs).Append("\n");
            sb.Append("  FullNameTabs: ").Append(FullNameTabs).Append("\n");
            sb.Append("  LastNameTabs: ").Append(LastNameTabs).Append("\n");
            sb.Append("  SignHereTabs: ").Append(SignHereTabs).Append("\n");
            sb.Append("  TextTabs: ").Append(TextTabs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ESignTabsRecord);
        }

        /// <summary>
        /// Returns true if ESignTabsRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ESignTabsRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ESignTabsRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DateSignedTabs == other.DateSignedTabs ||
                    this.DateSignedTabs != null &&
                    this.DateSignedTabs.SequenceEqual(other.DateSignedTabs)
                ) && 
                (
                    this.EmailAddressTabs == other.EmailAddressTabs ||
                    this.EmailAddressTabs != null &&
                    this.EmailAddressTabs.SequenceEqual(other.EmailAddressTabs)
                ) && 
                (
                    this.FirstNameTabs == other.FirstNameTabs ||
                    this.FirstNameTabs != null &&
                    this.FirstNameTabs.SequenceEqual(other.FirstNameTabs)
                ) && 
                (
                    this.FullNameTabs == other.FullNameTabs ||
                    this.FullNameTabs != null &&
                    this.FullNameTabs.SequenceEqual(other.FullNameTabs)
                ) && 
                (
                    this.LastNameTabs == other.LastNameTabs ||
                    this.LastNameTabs != null &&
                    this.LastNameTabs.SequenceEqual(other.LastNameTabs)
                ) && 
                (
                    this.SignHereTabs == other.SignHereTabs ||
                    this.SignHereTabs != null &&
                    this.SignHereTabs.SequenceEqual(other.SignHereTabs)
                ) && 
                (
                    this.TextTabs == other.TextTabs ||
                    this.TextTabs != null &&
                    this.TextTabs.SequenceEqual(other.TextTabs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DateSignedTabs != null)
                    hash = hash * 59 + this.DateSignedTabs.GetHashCode();
                if (this.EmailAddressTabs != null)
                    hash = hash * 59 + this.EmailAddressTabs.GetHashCode();
                if (this.FirstNameTabs != null)
                    hash = hash * 59 + this.FirstNameTabs.GetHashCode();
                if (this.FullNameTabs != null)
                    hash = hash * 59 + this.FullNameTabs.GetHashCode();
                if (this.LastNameTabs != null)
                    hash = hash * 59 + this.LastNameTabs.GetHashCode();
                if (this.SignHereTabs != null)
                    hash = hash * 59 + this.SignHereTabs.GetHashCode();
                if (this.TextTabs != null)
                    hash = hash * 59 + this.TextTabs.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
