/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// The started by information for a workflow instance
    /// </summary>
    [DataContract]
    public partial class StartedByInstance :  IEquatable<StartedByInstance>, IValidatableObject
    {
        public StartedByInstance()
        {
            // Empty Constructor
        }

                /// <summary>
        /// Defines StartedByType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StartedByTypeEnum
        {
            
            /// <summary>
            /// Enum Anonymous for value: Anonymous
            /// </summary>
            [EnumMember(Value = "Anonymous")]
            Anonymous = 1,
            
            /// <summary>
            /// Enum Preparer for value: Preparer
            /// </summary>
            [EnumMember(Value = "Preparer")]
            Preparer = 2,
            
            /// <summary>
            /// Enum Participant for value: Participant
            /// </summary>
            [EnumMember(Value = "Participant")]
            Participant = 3
        }

        /// <summary>
        /// Gets or Sets StartedByType
        /// </summary>
        [DataMember(Name="startedByType", EmitDefaultValue=false)]
        public StartedByTypeEnum? StartedByType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartedByInstance" /> class.
        /// </summary>
        /// <param name="StartedById">StartedById.</param>
        /// <param name="StartedByName">The user name of the person who starts a workflow Instance.</param>
        /// <param name="StartedByType">StartedByType.</param>
        public StartedByInstance(string StartedById = default(string), string StartedByName = default(string), StartedByTypeEnum? StartedByType = default(StartedByTypeEnum?))
        {
            this.StartedById = StartedById;
            this.StartedByName = StartedByName;
            this.StartedByType = StartedByType;
        }
        
        /// <summary>
        /// Gets or Sets StartedById
        /// </summary>
        [DataMember(Name="startedById", EmitDefaultValue=false)]
        public string StartedById { get; set; }
        /// <summary>
        /// The user name of the person who starts a workflow Instance
        /// </summary>
        /// <value>The user name of the person who starts a workflow Instance</value>
        [DataMember(Name="startedByName", EmitDefaultValue=false)]
        public string StartedByName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StartedByInstance {\n");
            sb.Append("  StartedById: ").Append(StartedById).Append("\n");
            sb.Append("  StartedByName: ").Append(StartedByName).Append("\n");
            sb.Append("  StartedByType: ").Append(StartedByType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StartedByInstance);
        }

        /// <summary>
        /// Returns true if StartedByInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of StartedByInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StartedByInstance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartedById == other.StartedById ||
                    this.StartedById != null &&
                    this.StartedById.Equals(other.StartedById)
                ) && 
                (
                    this.StartedByName == other.StartedByName ||
                    this.StartedByName != null &&
                    this.StartedByName.Equals(other.StartedByName)
                ) && 
                (
                    this.StartedByType == other.StartedByType ||
                    this.StartedByType != null &&
                    this.StartedByType.Equals(other.StartedByType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartedById != null)
                    hash = hash * 59 + this.StartedById.GetHashCode();
                if (this.StartedByName != null)
                    hash = hash * 59 + this.StartedByName.GetHashCode();
                if (this.StartedByType != null)
                    hash = hash * 59 + this.StartedByType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
