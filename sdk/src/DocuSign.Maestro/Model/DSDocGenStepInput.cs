/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSDocGenStepInput
    /// </summary>
    [DataContract]
    public partial class DSDocGenStepInput :  IEquatable<DSDocGenStepInput>, IValidatableObject
    {
        public DSDocGenStepInput()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [DataMember(Name="outputFormat", EmitDefaultValue=false)]
        public DSWorkflowDocGenDocOutputFormat? OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DSDocGenStepInput" /> class.
        /// </summary>
        /// <param name="DataJson">DataJson (required).</param>
        /// <param name="OutputFileName">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="OutputFileNameIsUnique">OutputFileNameIsUnique (required).</param>
        /// <param name="OutputFormat">OutputFormat (required).</param>
        /// <param name="TemplateId">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        public DSDocGenStepInput(RecordStringOrVariableOrTransformation DataJson = default(RecordStringOrVariableOrTransformation), Object OutputFileName = default(Object), bool? OutputFileNameIsUnique = default(bool?), DSWorkflowDocGenDocOutputFormat? OutputFormat = default(DSWorkflowDocGenDocOutputFormat?), Object TemplateId = default(Object))
        {
            // to ensure "DataJson" is required (not null)
            if (DataJson == null)
            {
                throw new InvalidDataException("DataJson is a required property for DSDocGenStepInput and cannot be null");
            }
            else
            {
                this.DataJson = DataJson;
            }
            // to ensure "OutputFileName" is required (not null)
            if (OutputFileName == null)
            {
                throw new InvalidDataException("OutputFileName is a required property for DSDocGenStepInput and cannot be null");
            }
            else
            {
                this.OutputFileName = OutputFileName;
            }
            // to ensure "OutputFileNameIsUnique" is required (not null)
            if (OutputFileNameIsUnique == null)
            {
                throw new InvalidDataException("OutputFileNameIsUnique is a required property for DSDocGenStepInput and cannot be null");
            }
            else
            {
                this.OutputFileNameIsUnique = OutputFileNameIsUnique;
            }
            // to ensure "OutputFormat" is required (not null)
            if (OutputFormat == null)
            {
                throw new InvalidDataException("OutputFormat is a required property for DSDocGenStepInput and cannot be null");
            }
            else
            {
                this.OutputFormat = OutputFormat;
            }
            // to ensure "TemplateId" is required (not null)
            if (TemplateId == null)
            {
                throw new InvalidDataException("TemplateId is a required property for DSDocGenStepInput and cannot be null");
            }
            else
            {
                this.TemplateId = TemplateId;
            }
        }
        
        /// <summary>
        /// Gets or Sets DataJson
        /// </summary>
        [DataMember(Name="dataJson", EmitDefaultValue=false)]
        public RecordStringOrVariableOrTransformation DataJson { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="outputFileName", EmitDefaultValue=false)]
        public Object OutputFileName { get; set; }
        /// <summary>
        /// Gets or Sets OutputFileNameIsUnique
        /// </summary>
        [DataMember(Name="outputFileNameIsUnique", EmitDefaultValue=false)]
        public bool? OutputFileNameIsUnique { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public Object TemplateId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSDocGenStepInput {\n");
            sb.Append("  DataJson: ").Append(DataJson).Append("\n");
            sb.Append("  OutputFileName: ").Append(OutputFileName).Append("\n");
            sb.Append("  OutputFileNameIsUnique: ").Append(OutputFileNameIsUnique).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSDocGenStepInput);
        }

        /// <summary>
        /// Returns true if DSDocGenStepInput instances are equal
        /// </summary>
        /// <param name="other">Instance of DSDocGenStepInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSDocGenStepInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DataJson == other.DataJson ||
                    this.DataJson != null &&
                    this.DataJson.Equals(other.DataJson)
                ) && 
                (
                    this.OutputFileName == other.OutputFileName ||
                    this.OutputFileName != null &&
                    this.OutputFileName.Equals(other.OutputFileName)
                ) && 
                (
                    this.OutputFileNameIsUnique == other.OutputFileNameIsUnique ||
                    this.OutputFileNameIsUnique != null &&
                    this.OutputFileNameIsUnique.Equals(other.OutputFileNameIsUnique)
                ) && 
                (
                    this.OutputFormat == other.OutputFormat ||
                    this.OutputFormat != null &&
                    this.OutputFormat.Equals(other.OutputFormat)
                ) && 
                (
                    this.TemplateId == other.TemplateId ||
                    this.TemplateId != null &&
                    this.TemplateId.Equals(other.TemplateId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DataJson != null)
                    hash = hash * 59 + this.DataJson.GetHashCode();
                if (this.OutputFileName != null)
                    hash = hash * 59 + this.OutputFileName.GetHashCode();
                if (this.OutputFileNameIsUnique != null)
                    hash = hash * 59 + this.OutputFileNameIsUnique.GetHashCode();
                if (this.OutputFormat != null)
                    hash = hash * 59 + this.OutputFormat.GetHashCode();
                if (this.TemplateId != null)
                    hash = hash * 59 + this.TemplateId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
