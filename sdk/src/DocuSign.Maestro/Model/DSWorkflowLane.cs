/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSWorkflowLane
    /// </summary>
    [DataContract]
    public partial class DSWorkflowLane :  IEquatable<DSWorkflowLane>, IValidatableObject
    {
        public DSWorkflowLane()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSWorkflowLane" /> class.
        /// </summary>
        /// <param name="LaneId">LaneId (required).</param>
        /// <param name="LaneSteps">A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep] (required).</param>
        public DSWorkflowLane(string LaneId = default(string), List<Object> LaneSteps = default(List<Object>))
        {
            // to ensure "LaneId" is required (not null)
            if (LaneId == null)
            {
                throw new InvalidDataException("LaneId is a required property for DSWorkflowLane and cannot be null");
            }
            else
            {
                this.LaneId = LaneId;
            }
            // to ensure "LaneSteps" is required (not null)
            if (LaneSteps == null)
            {
                throw new InvalidDataException("LaneSteps is a required property for DSWorkflowLane and cannot be null");
            }
            else
            {
                this.LaneSteps = LaneSteps;
            }
        }
        
        /// <summary>
        /// Gets or Sets LaneId
        /// </summary>
        [DataMember(Name="laneId", EmitDefaultValue=false)]
        public string LaneId { get; set; }
        /// <summary>
        /// A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep]
        /// </summary>
        /// <value>A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep]</value>
        [DataMember(Name="laneSteps", EmitDefaultValue=false)]
        public List<Object> LaneSteps { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSWorkflowLane {\n");
            sb.Append("  LaneId: ").Append(LaneId).Append("\n");
            sb.Append("  LaneSteps: ").Append(LaneSteps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSWorkflowLane);
        }

        /// <summary>
        /// Returns true if DSWorkflowLane instances are equal
        /// </summary>
        /// <param name="other">Instance of DSWorkflowLane to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSWorkflowLane other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LaneId == other.LaneId ||
                    this.LaneId != null &&
                    this.LaneId.Equals(other.LaneId)
                ) && 
                (
                    this.LaneSteps == other.LaneSteps ||
                    this.LaneSteps != null &&
                    this.LaneSteps.SequenceEqual(other.LaneSteps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LaneId != null)
                    hash = hash * 59 + this.LaneId.GetHashCode();
                if (this.LaneSteps != null)
                    hash = hash * 59 + this.LaneSteps.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
