/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// NewOrUpdatedWorkflowDefinitionResponse
    /// </summary>
    [DataContract]
    public partial class NewOrUpdatedWorkflowDefinitionResponse :  IEquatable<NewOrUpdatedWorkflowDefinitionResponse>, IValidatableObject
    {
        public NewOrUpdatedWorkflowDefinitionResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewOrUpdatedWorkflowDefinitionResponse" /> class.
        /// </summary>
        /// <param name="IsValidWorkflowDefinition">IsValidWorkflowDefinition (required).</param>
        /// <param name="ValidationErrors">ValidationErrors (required).</param>
        /// <param name="WorkflowDefinition">WorkflowDefinition (required).</param>
        /// <param name="WorkflowDefinitionId">WorkflowDefinitionId (required).</param>
        public NewOrUpdatedWorkflowDefinitionResponse(bool? IsValidWorkflowDefinition = default(bool?), List<ValidationErrors> ValidationErrors = default(List<ValidationErrors>), WorkflowDefinition WorkflowDefinition = default(WorkflowDefinition), string WorkflowDefinitionId = default(string))
        {
            // to ensure "IsValidWorkflowDefinition" is required (not null)
            if (IsValidWorkflowDefinition == null)
            {
                throw new InvalidDataException("IsValidWorkflowDefinition is a required property for NewOrUpdatedWorkflowDefinitionResponse and cannot be null");
            }
            else
            {
                this.IsValidWorkflowDefinition = IsValidWorkflowDefinition;
            }
            // to ensure "ValidationErrors" is required (not null)
            if (ValidationErrors == null)
            {
                throw new InvalidDataException("ValidationErrors is a required property for NewOrUpdatedWorkflowDefinitionResponse and cannot be null");
            }
            else
            {
                this.ValidationErrors = ValidationErrors;
            }
            // to ensure "WorkflowDefinition" is required (not null)
            if (WorkflowDefinition == null)
            {
                throw new InvalidDataException("WorkflowDefinition is a required property for NewOrUpdatedWorkflowDefinitionResponse and cannot be null");
            }
            else
            {
                this.WorkflowDefinition = WorkflowDefinition;
            }
            // to ensure "WorkflowDefinitionId" is required (not null)
            if (WorkflowDefinitionId == null)
            {
                throw new InvalidDataException("WorkflowDefinitionId is a required property for NewOrUpdatedWorkflowDefinitionResponse and cannot be null");
            }
            else
            {
                this.WorkflowDefinitionId = WorkflowDefinitionId;
            }
        }
        
        /// <summary>
        /// Gets or Sets IsValidWorkflowDefinition
        /// </summary>
        [DataMember(Name="isValidWorkflowDefinition", EmitDefaultValue=false)]
        public bool? IsValidWorkflowDefinition { get; set; }
        /// <summary>
        /// Gets or Sets ValidationErrors
        /// </summary>
        [DataMember(Name="validationErrors", EmitDefaultValue=false)]
        public List<ValidationErrors> ValidationErrors { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowDefinition
        /// </summary>
        [DataMember(Name="workflowDefinition", EmitDefaultValue=false)]
        public WorkflowDefinition WorkflowDefinition { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowDefinitionId
        /// </summary>
        [DataMember(Name="workflowDefinitionId", EmitDefaultValue=false)]
        public string WorkflowDefinitionId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewOrUpdatedWorkflowDefinitionResponse {\n");
            sb.Append("  IsValidWorkflowDefinition: ").Append(IsValidWorkflowDefinition).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  WorkflowDefinition: ").Append(WorkflowDefinition).Append("\n");
            sb.Append("  WorkflowDefinitionId: ").Append(WorkflowDefinitionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NewOrUpdatedWorkflowDefinitionResponse);
        }

        /// <summary>
        /// Returns true if NewOrUpdatedWorkflowDefinitionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of NewOrUpdatedWorkflowDefinitionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewOrUpdatedWorkflowDefinitionResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsValidWorkflowDefinition == other.IsValidWorkflowDefinition ||
                    this.IsValidWorkflowDefinition != null &&
                    this.IsValidWorkflowDefinition.Equals(other.IsValidWorkflowDefinition)
                ) && 
                (
                    this.ValidationErrors == other.ValidationErrors ||
                    this.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(other.ValidationErrors)
                ) && 
                (
                    this.WorkflowDefinition == other.WorkflowDefinition ||
                    this.WorkflowDefinition != null &&
                    this.WorkflowDefinition.Equals(other.WorkflowDefinition)
                ) && 
                (
                    this.WorkflowDefinitionId == other.WorkflowDefinitionId ||
                    this.WorkflowDefinitionId != null &&
                    this.WorkflowDefinitionId.Equals(other.WorkflowDefinitionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsValidWorkflowDefinition != null)
                    hash = hash * 59 + this.IsValidWorkflowDefinition.GetHashCode();
                if (this.ValidationErrors != null)
                    hash = hash * 59 + this.ValidationErrors.GetHashCode();
                if (this.WorkflowDefinition != null)
                    hash = hash * 59 + this.WorkflowDefinition.GetHashCode();
                if (this.WorkflowDefinitionId != null)
                    hash = hash * 59 + this.WorkflowDefinitionId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
