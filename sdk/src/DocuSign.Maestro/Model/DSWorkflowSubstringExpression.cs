/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// DSWorkflowSubstringExpression
    /// </summary>
    [DataContract]
    public partial class DSWorkflowSubstringExpression :  IEquatable<DSWorkflowSubstringExpression>, IValidatableObject
    {
        public DSWorkflowSubstringExpression()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSWorkflowSubstringExpression" /> class.
        /// </summary>
        /// <param name="Length">Reference of #/definitions/NumberOrVariable. Object stands for a number or a Variable. This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable].</param>
        /// <param name="StartIndex">Reference of #/definitions/NumberOrVariable. Object stands for a number or a Variable. This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable] (required).</param>
        /// <param name="Text">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression] (required).</param>
        /// <param name="Type">Type (required).</param>
        public DSWorkflowSubstringExpression(Object Length = default(Object), Object StartIndex = default(Object), Object Text = default(Object), DSWorkflowTransformationExpressionTypesSubstringExpression Type = default(DSWorkflowTransformationExpressionTypesSubstringExpression))
        {
            // to ensure "StartIndex" is required (not null)
            if (StartIndex == null)
            {
                throw new InvalidDataException("StartIndex is a required property for DSWorkflowSubstringExpression and cannot be null");
            }
            else
            {
                this.StartIndex = StartIndex;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for DSWorkflowSubstringExpression and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for DSWorkflowSubstringExpression and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Length = Length;
        }
        
        /// <summary>
        /// Reference of #/definitions/NumberOrVariable. Object stands for a number or a Variable. This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable]
        /// </summary>
        /// <value>Reference of #/definitions/NumberOrVariable. Object stands for a number or a Variable. This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable]</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public Object Length { get; set; }
        /// <summary>
        /// Reference of #/definitions/NumberOrVariable. Object stands for a number or a Variable. This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable]
        /// </summary>
        /// <value>Reference of #/definitions/NumberOrVariable. Object stands for a number or a Variable. This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable]</value>
        [DataMember(Name="startIndex", EmitDefaultValue=false)]
        public Object StartIndex { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public Object Text { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public DSWorkflowTransformationExpressionTypesSubstringExpression Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSWorkflowSubstringExpression {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSWorkflowSubstringExpression);
        }

        /// <summary>
        /// Returns true if DSWorkflowSubstringExpression instances are equal
        /// </summary>
        /// <param name="other">Instance of DSWorkflowSubstringExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSWorkflowSubstringExpression other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Length == other.Length ||
                    this.Length != null &&
                    this.Length.Equals(other.Length)
                ) && 
                (
                    this.StartIndex == other.StartIndex ||
                    this.StartIndex != null &&
                    this.StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Length != null)
                    hash = hash * 59 + this.Length.GetHashCode();
                if (this.StartIndex != null)
                    hash = hash * 59 + this.StartIndex.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
