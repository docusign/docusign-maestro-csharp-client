/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// ESignTabs
    /// </summary>
    [DataContract]
    public partial class ESignTabs :  IEquatable<ESignTabs>, IValidatableObject
    {
        public ESignTabs()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ESignTabs" /> class.
        /// </summary>
        /// <param name="AnchorString">AnchorString.</param>
        /// <param name="Bold">Bold.</param>
        /// <param name="DocumentId">DocumentId.</param>
        /// <param name="Font">Font.</param>
        /// <param name="FontColor">FontColor.</param>
        /// <param name="FontSize">FontSize.</param>
        /// <param name="Height">Height.</param>
        /// <param name="Italic">Italic.</param>
        /// <param name="LocalePolicy">LocalePolicy.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Optional">Optional.</param>
        /// <param name="PageNumber">PageNumber.</param>
        /// <param name="RecipientId">RecipientId.</param>
        /// <param name="ScaleValue">ScaleValue.</param>
        /// <param name="StampType">StampType.</param>
        /// <param name="TabId">TabId (required).</param>
        /// <param name="TabLabel">TabLabel.</param>
        /// <param name="TabType">TabType.</param>
        /// <param name="TemplateLocked">TemplateLocked.</param>
        /// <param name="TemplateRequired">TemplateRequired.</param>
        /// <param name="Tooltip">Tooltip.</param>
        /// <param name="Underline">Underline.</param>
        /// <param name="Value">Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression].</param>
        /// <param name="Width">Width.</param>
        /// <param name="XPosition">XPosition.</param>
        /// <param name="YPosition">YPosition.</param>
        public ESignTabs(string AnchorString = default(string), string Bold = default(string), string DocumentId = default(string), string Font = default(string), string FontColor = default(string), string FontSize = default(string), string Height = default(string), string Italic = default(string), Dictionary<string, Object> LocalePolicy = default(Dictionary<string, Object>), string Name = default(string), string Optional = default(string), string PageNumber = default(string), string RecipientId = default(string), string ScaleValue = default(string), string StampType = default(string), string TabId = default(string), string TabLabel = default(string), string TabType = default(string), string TemplateLocked = default(string), string TemplateRequired = default(string), string Tooltip = default(string), string Underline = default(string), Object Value = default(Object), string Width = default(string), string XPosition = default(string), string YPosition = default(string))
        {
            // to ensure "TabId" is required (not null)
            if (TabId == null)
            {
                throw new InvalidDataException("TabId is a required property for ESignTabs and cannot be null");
            }
            else
            {
                this.TabId = TabId;
            }
            this.AnchorString = AnchorString;
            this.Bold = Bold;
            this.DocumentId = DocumentId;
            this.Font = Font;
            this.FontColor = FontColor;
            this.FontSize = FontSize;
            this.Height = Height;
            this.Italic = Italic;
            this.LocalePolicy = LocalePolicy;
            this.Name = Name;
            this.Optional = Optional;
            this.PageNumber = PageNumber;
            this.RecipientId = RecipientId;
            this.ScaleValue = ScaleValue;
            this.StampType = StampType;
            this.TabLabel = TabLabel;
            this.TabType = TabType;
            this.TemplateLocked = TemplateLocked;
            this.TemplateRequired = TemplateRequired;
            this.Tooltip = Tooltip;
            this.Underline = Underline;
            this.Value = Value;
            this.Width = Width;
            this.XPosition = XPosition;
            this.YPosition = YPosition;
        }
        
        /// <summary>
        /// Gets or Sets AnchorString
        /// </summary>
        [DataMember(Name="anchorString", EmitDefaultValue=false)]
        public string AnchorString { get; set; }
        /// <summary>
        /// Gets or Sets Bold
        /// </summary>
        [DataMember(Name="bold", EmitDefaultValue=false)]
        public string Bold { get; set; }
        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Gets or Sets Font
        /// </summary>
        [DataMember(Name="font", EmitDefaultValue=false)]
        public string Font { get; set; }
        /// <summary>
        /// Gets or Sets FontColor
        /// </summary>
        [DataMember(Name="fontColor", EmitDefaultValue=false)]
        public string FontColor { get; set; }
        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }
        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }
        /// <summary>
        /// Gets or Sets Italic
        /// </summary>
        [DataMember(Name="italic", EmitDefaultValue=false)]
        public string Italic { get; set; }
        /// <summary>
        /// Gets or Sets LocalePolicy
        /// </summary>
        [DataMember(Name="localePolicy", EmitDefaultValue=false)]
        public Dictionary<string, Object> LocalePolicy { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Optional
        /// </summary>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public string Optional { get; set; }
        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public string PageNumber { get; set; }
        /// <summary>
        /// Gets or Sets RecipientId
        /// </summary>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets ScaleValue
        /// </summary>
        [DataMember(Name="scaleValue", EmitDefaultValue=false)]
        public string ScaleValue { get; set; }
        /// <summary>
        /// Gets or Sets StampType
        /// </summary>
        [DataMember(Name="stampType", EmitDefaultValue=false)]
        public string StampType { get; set; }
        /// <summary>
        /// Gets or Sets TabId
        /// </summary>
        [DataMember(Name="tabId", EmitDefaultValue=false)]
        public string TabId { get; set; }
        /// <summary>
        /// Gets or Sets TabLabel
        /// </summary>
        [DataMember(Name="tabLabel", EmitDefaultValue=false)]
        public string TabLabel { get; set; }
        /// <summary>
        /// Gets or Sets TabType
        /// </summary>
        [DataMember(Name="tabType", EmitDefaultValue=false)]
        public string TabType { get; set; }
        /// <summary>
        /// Gets or Sets TemplateLocked
        /// </summary>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// Gets or Sets TemplateRequired
        /// </summary>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }
        /// <summary>
        /// Gets or Sets Underline
        /// </summary>
        [DataMember(Name="underline", EmitDefaultValue=false)]
        public string Underline { get; set; }
        /// <summary>
        /// Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]
        /// </summary>
        /// <value>Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }
        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }
        /// <summary>
        /// Gets or Sets XPosition
        /// </summary>
        [DataMember(Name="xPosition", EmitDefaultValue=false)]
        public string XPosition { get; set; }
        /// <summary>
        /// Gets or Sets YPosition
        /// </summary>
        [DataMember(Name="yPosition", EmitDefaultValue=false)]
        public string YPosition { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ESignTabs {\n");
            sb.Append("  AnchorString: ").Append(AnchorString).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  FontColor: ").Append(FontColor).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Italic: ").Append(Italic).Append("\n");
            sb.Append("  LocalePolicy: ").Append(LocalePolicy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  ScaleValue: ").Append(ScaleValue).Append("\n");
            sb.Append("  StampType: ").Append(StampType).Append("\n");
            sb.Append("  TabId: ").Append(TabId).Append("\n");
            sb.Append("  TabLabel: ").Append(TabLabel).Append("\n");
            sb.Append("  TabType: ").Append(TabType).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  Underline: ").Append(Underline).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  XPosition: ").Append(XPosition).Append("\n");
            sb.Append("  YPosition: ").Append(YPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ESignTabs);
        }

        /// <summary>
        /// Returns true if ESignTabs instances are equal
        /// </summary>
        /// <param name="other">Instance of ESignTabs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ESignTabs other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AnchorString == other.AnchorString ||
                    this.AnchorString != null &&
                    this.AnchorString.Equals(other.AnchorString)
                ) && 
                (
                    this.Bold == other.Bold ||
                    this.Bold != null &&
                    this.Bold.Equals(other.Bold)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.Font == other.Font ||
                    this.Font != null &&
                    this.Font.Equals(other.Font)
                ) && 
                (
                    this.FontColor == other.FontColor ||
                    this.FontColor != null &&
                    this.FontColor.Equals(other.FontColor)
                ) && 
                (
                    this.FontSize == other.FontSize ||
                    this.FontSize != null &&
                    this.FontSize.Equals(other.FontSize)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.Italic == other.Italic ||
                    this.Italic != null &&
                    this.Italic.Equals(other.Italic)
                ) && 
                (
                    this.LocalePolicy == other.LocalePolicy ||
                    this.LocalePolicy != null &&
                    this.LocalePolicy.SequenceEqual(other.LocalePolicy)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Optional == other.Optional ||
                    this.Optional != null &&
                    this.Optional.Equals(other.Optional)
                ) && 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.ScaleValue == other.ScaleValue ||
                    this.ScaleValue != null &&
                    this.ScaleValue.Equals(other.ScaleValue)
                ) && 
                (
                    this.StampType == other.StampType ||
                    this.StampType != null &&
                    this.StampType.Equals(other.StampType)
                ) && 
                (
                    this.TabId == other.TabId ||
                    this.TabId != null &&
                    this.TabId.Equals(other.TabId)
                ) && 
                (
                    this.TabLabel == other.TabLabel ||
                    this.TabLabel != null &&
                    this.TabLabel.Equals(other.TabLabel)
                ) && 
                (
                    this.TabType == other.TabType ||
                    this.TabType != null &&
                    this.TabType.Equals(other.TabType)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.Tooltip == other.Tooltip ||
                    this.Tooltip != null &&
                    this.Tooltip.Equals(other.Tooltip)
                ) && 
                (
                    this.Underline == other.Underline ||
                    this.Underline != null &&
                    this.Underline.Equals(other.Underline)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.XPosition == other.XPosition ||
                    this.XPosition != null &&
                    this.XPosition.Equals(other.XPosition)
                ) && 
                (
                    this.YPosition == other.YPosition ||
                    this.YPosition != null &&
                    this.YPosition.Equals(other.YPosition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AnchorString != null)
                    hash = hash * 59 + this.AnchorString.GetHashCode();
                if (this.Bold != null)
                    hash = hash * 59 + this.Bold.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.Font != null)
                    hash = hash * 59 + this.Font.GetHashCode();
                if (this.FontColor != null)
                    hash = hash * 59 + this.FontColor.GetHashCode();
                if (this.FontSize != null)
                    hash = hash * 59 + this.FontSize.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.Italic != null)
                    hash = hash * 59 + this.Italic.GetHashCode();
                if (this.LocalePolicy != null)
                    hash = hash * 59 + this.LocalePolicy.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Optional != null)
                    hash = hash * 59 + this.Optional.GetHashCode();
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.ScaleValue != null)
                    hash = hash * 59 + this.ScaleValue.GetHashCode();
                if (this.StampType != null)
                    hash = hash * 59 + this.StampType.GetHashCode();
                if (this.TabId != null)
                    hash = hash * 59 + this.TabId.GetHashCode();
                if (this.TabLabel != null)
                    hash = hash * 59 + this.TabLabel.GetHashCode();
                if (this.TabType != null)
                    hash = hash * 59 + this.TabType.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.Tooltip != null)
                    hash = hash * 59 + this.Tooltip.GetHashCode();
                if (this.Underline != null)
                    hash = hash * 59 + this.Underline.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.XPosition != null)
                    hash = hash * 59 + this.XPosition.GetHashCode();
                if (this.YPosition != null)
                    hash = hash * 59 + this.YPosition.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
