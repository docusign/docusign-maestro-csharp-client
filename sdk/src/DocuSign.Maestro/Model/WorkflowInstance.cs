/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// Details of a Workflow Instance triggered for a Workflow Definition
    /// </summary>
    [DataContract]
    public partial class WorkflowInstance :  IEquatable<WorkflowInstance>, IValidatableObject
    {
        public WorkflowInstance()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Gets or Sets InstanceState
        /// </summary>
        [DataMember(Name="instanceState", EmitDefaultValue=false)]
        public WorkflowInstanceState? InstanceState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowInstance" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="CreatorId">CreatorId (required).</param>
        /// <param name="DacId">DacId (required).</param>
        /// <param name="EndDate">Track the End time of the Workflow Instance.</param>
        /// <param name="InstanceName">The friendly name of the particular workflow instance.</param>
        /// <param name="InstanceState">InstanceState (required).</param>
        /// <param name="Progress">Progress.</param>
        /// <param name="StartDate">Track the Start time of the Workflow Instance.</param>
        /// <param name="StartedBy">StartedBy.</param>
        /// <param name="TemplateId">TemplateId (required).</param>
        /// <param name="Users">Contains the list of Users and Steps mapping (required).</param>
        public WorkflowInstance(string AccountId = default(string), string CreatorId = default(string), string DacId = default(string), DateTime? EndDate = default(DateTime?), string InstanceName = default(string), WorkflowInstanceState? InstanceState = default(WorkflowInstanceState?), ProgressInstance Progress = default(ProgressInstance), DateTime? StartDate = default(DateTime?), StartedByInstance StartedBy = default(StartedByInstance), string TemplateId = default(string), Dictionary<string, string> Users = default(Dictionary<string, string>))
        {
            // to ensure "CreatorId" is required (not null)
            if (CreatorId == null)
            {
                throw new InvalidDataException("CreatorId is a required property for WorkflowInstance and cannot be null");
            }
            else
            {
                this.CreatorId = CreatorId;
            }
            // to ensure "DacId" is required (not null)
            if (DacId == null)
            {
                throw new InvalidDataException("DacId is a required property for WorkflowInstance and cannot be null");
            }
            else
            {
                this.DacId = DacId;
            }
            // to ensure "InstanceState" is required (not null)
            if (InstanceState == null)
            {
                throw new InvalidDataException("InstanceState is a required property for WorkflowInstance and cannot be null");
            }
            else
            {
                this.InstanceState = InstanceState;
            }
            // to ensure "TemplateId" is required (not null)
            if (TemplateId == null)
            {
                throw new InvalidDataException("TemplateId is a required property for WorkflowInstance and cannot be null");
            }
            else
            {
                this.TemplateId = TemplateId;
            }
            // to ensure "Users" is required (not null)
            if (Users == null)
            {
                throw new InvalidDataException("Users is a required property for WorkflowInstance and cannot be null");
            }
            else
            {
                this.Users = Users;
            }
            this.AccountId = AccountId;
            this.EndDate = EndDate;
            this.InstanceName = InstanceName;
            this.Progress = Progress;
            this.StartDate = StartDate;
            this.StartedBy = StartedBy;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Gets or Sets CreatorId
        /// </summary>
        [DataMember(Name="creatorId", EmitDefaultValue=false)]
        public string CreatorId { get; set; }
        /// <summary>
        /// Gets or Sets DacId
        /// </summary>
        [DataMember(Name="dacId", EmitDefaultValue=false)]
        public string DacId { get; set; }
        /// <summary>
        /// Track the End time of the Workflow Instance
        /// </summary>
        /// <value>Track the End time of the Workflow Instance</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// The friendly name of the particular workflow instance
        /// </summary>
        /// <value>The friendly name of the particular workflow instance</value>
        [DataMember(Name="instanceName", EmitDefaultValue=false)]
        public string InstanceName { get; set; }
        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public ProgressInstance Progress { get; set; }
        /// <summary>
        /// Track the Start time of the Workflow Instance
        /// </summary>
        /// <value>Track the Start time of the Workflow Instance</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Gets or Sets StartedBy
        /// </summary>
        [DataMember(Name="startedBy", EmitDefaultValue=false)]
        public StartedByInstance StartedBy { get; set; }
        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }
        /// <summary>
        /// Contains the list of Users and Steps mapping
        /// </summary>
        /// <value>Contains the list of Users and Steps mapping</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public Dictionary<string, string> Users { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowInstance {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  DacId: ").Append(DacId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  InstanceName: ").Append(InstanceName).Append("\n");
            sb.Append("  InstanceState: ").Append(InstanceState).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartedBy: ").Append(StartedBy).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowInstance);
        }

        /// <summary>
        /// Returns true if WorkflowInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowInstance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.CreatorId == other.CreatorId ||
                    this.CreatorId != null &&
                    this.CreatorId.Equals(other.CreatorId)
                ) && 
                (
                    this.DacId == other.DacId ||
                    this.DacId != null &&
                    this.DacId.Equals(other.DacId)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.InstanceName == other.InstanceName ||
                    this.InstanceName != null &&
                    this.InstanceName.Equals(other.InstanceName)
                ) && 
                (
                    this.InstanceState == other.InstanceState ||
                    this.InstanceState != null &&
                    this.InstanceState.Equals(other.InstanceState)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.StartedBy == other.StartedBy ||
                    this.StartedBy != null &&
                    this.StartedBy.Equals(other.StartedBy)
                ) && 
                (
                    this.TemplateId == other.TemplateId ||
                    this.TemplateId != null &&
                    this.TemplateId.Equals(other.TemplateId)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.CreatorId != null)
                    hash = hash * 59 + this.CreatorId.GetHashCode();
                if (this.DacId != null)
                    hash = hash * 59 + this.DacId.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.InstanceName != null)
                    hash = hash * 59 + this.InstanceName.GetHashCode();
                if (this.InstanceState != null)
                    hash = hash * 59 + this.InstanceState.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.StartedBy != null)
                    hash = hash * 59 + this.StartedBy.GetHashCode();
                if (this.TemplateId != null)
                    hash = hash * 59 + this.TemplateId.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
