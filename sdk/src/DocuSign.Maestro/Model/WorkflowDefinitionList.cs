/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// Returns a list of workflow definitions&#39; metadata (0 or more).
    /// </summary>
    [DataContract]
    public partial class WorkflowDefinitionList :  IEquatable<WorkflowDefinitionList>, IValidatableObject
    {
        public WorkflowDefinitionList()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDefinitionList" /> class.
        /// </summary>
        /// <param name="Count">Total number of definitions returned.</param>
        /// <param name="Value">Array of workflow definition metadata.</param>
        public WorkflowDefinitionList(decimal? Count = default(decimal?), List<WorkflowDefinitionMetadata> Value = default(List<WorkflowDefinitionMetadata>))
        {
            this.Count = Count;
            this.Value = Value;
        }
        
        /// <summary>
        /// Total number of definitions returned
        /// </summary>
        /// <value>Total number of definitions returned</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public decimal? Count { get; set; }
        /// <summary>
        /// Array of workflow definition metadata
        /// </summary>
        /// <value>Array of workflow definition metadata</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public List<WorkflowDefinitionMetadata> Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowDefinitionList {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowDefinitionList);
        }

        /// <summary>
        /// Returns true if WorkflowDefinitionList instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowDefinitionList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowDefinitionList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.SequenceEqual(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
