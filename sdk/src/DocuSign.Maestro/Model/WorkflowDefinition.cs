/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Maestro.Model
{
    /// <summary>
    /// A DS workflow definition.
    /// </summary>
    [DataContract]
    public partial class WorkflowDefinition :  IEquatable<WorkflowDefinition>, IValidatableObject
    {
        public WorkflowDefinition()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDefinition" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId (required).</param>
        /// <param name="CreatedByName">The name of the user who created this workflow definition.</param>
        /// <param name="DocumentVersion">DocumentVersion (required).</param>
        /// <param name="Participants">A DS Workflow participant record.</param>
        /// <param name="SchemaVersion">SchemaVersion (required).</param>
        /// <param name="Steps">A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep] (required).</param>
        /// <param name="Trigger">Trigger (required).</param>
        /// <param name="Variables">A DS Workflow variable record (required).</param>
        /// <param name="WorkflowDescription">WorkflowDescription (required).</param>
        /// <param name="WorkflowName">WorkflowName (required).</param>
        public WorkflowDefinition(string AccountId = default(string), string CreatedByName = default(string), string DocumentVersion = default(string), Dictionary<string, Participant> Participants = default(Dictionary<string, Participant>), string SchemaVersion = default(string), List<Object> Steps = default(List<Object>), DSWorkflowTrigger Trigger = default(DSWorkflowTrigger), Dictionary<string, Object> Variables = default(Dictionary<string, Object>), string WorkflowDescription = default(string), string WorkflowName = default(string))
        {
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "DocumentVersion" is required (not null)
            if (DocumentVersion == null)
            {
                throw new InvalidDataException("DocumentVersion is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.DocumentVersion = DocumentVersion;
            }
            // to ensure "SchemaVersion" is required (not null)
            if (SchemaVersion == null)
            {
                throw new InvalidDataException("SchemaVersion is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.SchemaVersion = SchemaVersion;
            }
            // to ensure "Steps" is required (not null)
            if (Steps == null)
            {
                throw new InvalidDataException("Steps is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.Steps = Steps;
            }
            // to ensure "Trigger" is required (not null)
            if (Trigger == null)
            {
                throw new InvalidDataException("Trigger is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.Trigger = Trigger;
            }
            // to ensure "Variables" is required (not null)
            if (Variables == null)
            {
                throw new InvalidDataException("Variables is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.Variables = Variables;
            }
            // to ensure "WorkflowDescription" is required (not null)
            if (WorkflowDescription == null)
            {
                throw new InvalidDataException("WorkflowDescription is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.WorkflowDescription = WorkflowDescription;
            }
            // to ensure "WorkflowName" is required (not null)
            if (WorkflowName == null)
            {
                throw new InvalidDataException("WorkflowName is a required property for WorkflowDefinition and cannot be null");
            }
            else
            {
                this.WorkflowName = WorkflowName;
            }
            this.CreatedByName = CreatedByName;
            this.Participants = Participants;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// The name of the user who created this workflow definition
        /// </summary>
        /// <value>The name of the user who created this workflow definition</value>
        [DataMember(Name="createdByName", EmitDefaultValue=false)]
        public string CreatedByName { get; set; }
        /// <summary>
        /// Gets or Sets DocumentVersion
        /// </summary>
        [DataMember(Name="documentVersion", EmitDefaultValue=false)]
        public string DocumentVersion { get; set; }
        /// <summary>
        /// A DS Workflow participant record
        /// </summary>
        /// <value>A DS Workflow participant record</value>
        [DataMember(Name="participants", EmitDefaultValue=false)]
        public Dictionary<string, Participant> Participants { get; set; }
        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name="schemaVersion", EmitDefaultValue=false)]
        public string SchemaVersion { get; set; }
        /// <summary>
        /// A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep]
        /// </summary>
        /// <value>A list of #/definitions/DSWorkflowStep. Each element is: A DS Workflow Step. This object should be any of the following object models: [#/definitions/DSServiceStep, #/definitions/DSTransformationStep, #/definitions/DSDocGenStep, #/definitions/DSSignStep]</value>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public List<Object> Steps { get; set; }
        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public DSWorkflowTrigger Trigger { get; set; }
        /// <summary>
        /// A DS Workflow variable record
        /// </summary>
        /// <value>A DS Workflow variable record</value>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public Dictionary<string, Object> Variables { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowDescription
        /// </summary>
        [DataMember(Name="workflowDescription", EmitDefaultValue=false)]
        public string WorkflowDescription { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowName
        /// </summary>
        [DataMember(Name="workflowName", EmitDefaultValue=false)]
        public string WorkflowName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowDefinition {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  DocumentVersion: ").Append(DocumentVersion).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  WorkflowDescription: ").Append(WorkflowDescription).Append("\n");
            sb.Append("  WorkflowName: ").Append(WorkflowName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowDefinition);
        }

        /// <summary>
        /// Returns true if WorkflowDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.CreatedByName == other.CreatedByName ||
                    this.CreatedByName != null &&
                    this.CreatedByName.Equals(other.CreatedByName)
                ) && 
                (
                    this.DocumentVersion == other.DocumentVersion ||
                    this.DocumentVersion != null &&
                    this.DocumentVersion.Equals(other.DocumentVersion)
                ) && 
                (
                    this.Participants == other.Participants ||
                    this.Participants != null &&
                    this.Participants.SequenceEqual(other.Participants)
                ) && 
                (
                    this.SchemaVersion == other.SchemaVersion ||
                    this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(other.SchemaVersion)
                ) && 
                (
                    this.Steps == other.Steps ||
                    this.Steps != null &&
                    this.Steps.SequenceEqual(other.Steps)
                ) && 
                (
                    this.Trigger == other.Trigger ||
                    this.Trigger != null &&
                    this.Trigger.Equals(other.Trigger)
                ) && 
                (
                    this.Variables == other.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(other.Variables)
                ) && 
                (
                    this.WorkflowDescription == other.WorkflowDescription ||
                    this.WorkflowDescription != null &&
                    this.WorkflowDescription.Equals(other.WorkflowDescription)
                ) && 
                (
                    this.WorkflowName == other.WorkflowName ||
                    this.WorkflowName != null &&
                    this.WorkflowName.Equals(other.WorkflowName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.CreatedByName != null)
                    hash = hash * 59 + this.CreatedByName.GetHashCode();
                if (this.DocumentVersion != null)
                    hash = hash * 59 + this.DocumentVersion.GetHashCode();
                if (this.Participants != null)
                    hash = hash * 59 + this.Participants.GetHashCode();
                if (this.SchemaVersion != null)
                    hash = hash * 59 + this.SchemaVersion.GetHashCode();
                if (this.Steps != null)
                    hash = hash * 59 + this.Steps.GetHashCode();
                if (this.Trigger != null)
                    hash = hash * 59 + this.Trigger.GetHashCode();
                if (this.Variables != null)
                    hash = hash * 59 + this.Variables.GetHashCode();
                if (this.WorkflowDescription != null)
                    hash = hash * 59 + this.WorkflowDescription.GetHashCode();
                if (this.WorkflowName != null)
                    hash = hash * 59 + this.WorkflowName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
