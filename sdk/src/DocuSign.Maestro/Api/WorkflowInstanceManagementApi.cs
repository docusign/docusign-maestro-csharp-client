/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Maestro.Client;
using DocuSign.Maestro.Model;

namespace DocuSign.Maestro.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowInstanceManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels a running workflow instance.
        /// </summary>
        /// <remarks>
        /// Cancels a running workflow instance.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns></returns>
        CancelResponse CancelWorkflowInstance(string accountId, string instanceId);

        /// <summary>
        /// Cancels a running workflow instance.
        /// </summary>
        /// <remarks>
        /// Cancels a running workflow instance.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CancelResponse> CancelWorkflowInstanceWithHttpInfo(string accountId, string instanceId);
        /// <summary>
        /// Get List of Step Histories
        /// </summary>
        /// <remarks>
        /// Returns a list of step history for a workflow instance
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns></returns>
        List<WorkflowStepHistory> GetWorkflowHistory(string accountId, string instanceId);

        /// <summary>
        /// Get List of Step Histories
        /// </summary>
        /// <remarks>
        /// Returns a list of step history for a workflow instance
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<List<WorkflowStepHistory>> GetWorkflowHistoryWithHttpInfo(string accountId, string instanceId);
        /// <summary>
        /// Get Workflow Instance Details
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific instance for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns></returns>
        WorkflowInstance GetWorkflowInstance(string accountId, string workflowDefinitionId, string instanceId);

        /// <summary>
        /// Get Workflow Instance Details
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific instance for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WorkflowInstance> GetWorkflowInstanceWithHttpInfo(string accountId, string workflowDefinitionId, string instanceId);
        /// <summary>
        /// Get List of Workflow Instances
        /// </summary>
        /// <remarks>
        /// Returns the list of instances for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns></returns>
        List<WorkflowInstance> GetWorkflowInstances(string accountId, string workflowDefinitionId);

        /// <summary>
        /// Get List of Workflow Instances
        /// </summary>
        /// <remarks>
        /// Returns the list of instances for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<List<WorkflowInstance>> GetWorkflowInstancesWithHttpInfo(string accountId, string workflowDefinitionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancels a running workflow instance.
        /// </summary>
        /// <remarks>
        /// Cancels a running workflow instance.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of CancelResponse</returns>
        System.Threading.Tasks.Task<CancelResponse> CancelWorkflowInstanceAsync(string accountId, string instanceId);

        /// <summary>
        /// Cancels a running workflow instance.
        /// </summary>
        /// <remarks>
        /// Cancels a running workflow instance.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of ApiResponse (CancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelResponse>> CancelWorkflowInstanceAsyncWithHttpInfo(string accountId, string instanceId);
        /// <summary>
        /// Get List of Step Histories
        /// </summary>
        /// <remarks>
        /// Returns a list of step history for a workflow instance
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of List<WorkflowStepHistory></returns>
        System.Threading.Tasks.Task<List<WorkflowStepHistory>> GetWorkflowHistoryAsync(string accountId, string instanceId);

        /// <summary>
        /// Get List of Step Histories
        /// </summary>
        /// <remarks>
        /// Returns a list of step history for a workflow instance
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of ApiResponse (List<WorkflowStepHistory>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowStepHistory>>> GetWorkflowHistoryAsyncWithHttpInfo(string accountId, string instanceId);
        /// <summary>
        /// Get Workflow Instance Details
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific instance for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of WorkflowInstance</returns>
        System.Threading.Tasks.Task<WorkflowInstance> GetWorkflowInstanceAsync(string accountId, string workflowDefinitionId, string instanceId);

        /// <summary>
        /// Get Workflow Instance Details
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific instance for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of ApiResponse (WorkflowInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowInstance>> GetWorkflowInstanceAsyncWithHttpInfo(string accountId, string workflowDefinitionId, string instanceId);
        /// <summary>
        /// Get List of Workflow Instances
        /// </summary>
        /// <remarks>
        /// Returns the list of instances for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of List<WorkflowInstance></returns>
        System.Threading.Tasks.Task<List<WorkflowInstance>> GetWorkflowInstancesAsync(string accountId, string workflowDefinitionId);

        /// <summary>
        /// Get List of Workflow Instances
        /// </summary>
        /// <remarks>
        /// Returns the list of instances for a deployed workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of ApiResponse (List<WorkflowInstance>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowInstance>>> GetWorkflowInstancesAsyncWithHttpInfo(string accountId, string workflowDefinitionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowInstanceManagementApi : IWorkflowInstanceManagementApi
    {
        private DocuSign.Maestro.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowInstanceManagementApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public WorkflowInstanceManagementApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Maestro.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Cancels a running workflow instance. Cancels a running workflow instance.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>CancelResponse</returns>
        public CancelResponse CancelWorkflowInstance(string accountId, string instanceId)
        {
             ApiResponse<CancelResponse> localVarResponse = CancelWorkflowInstanceWithHttpInfo(accountId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels a running workflow instance. Cancels a running workflow instance.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>ApiResponse of CancelResponse</returns>
        public ApiResponse<CancelResponse> CancelWorkflowInstanceWithHttpInfo(string accountId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->CancelWorkflowInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorkflowInstanceManagementApi->CancelWorkflowInstance");

            var localVarPath = "/v1/accounts/{accountId}/management/instances/{instanceId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelWorkflowInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CancelResponse)this.ApiClient.Deserialize(localVarResponse, typeof(CancelResponse)));
        }

        /// <summary>
        /// Cancels a running workflow instance. Cancels a running workflow instance.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of CancelResponse</returns>
        public async System.Threading.Tasks.Task<CancelResponse> CancelWorkflowInstanceAsync(string accountId, string instanceId)
        {
             ApiResponse<CancelResponse> localVarResponse = await CancelWorkflowInstanceAsyncWithHttpInfo(accountId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels a running workflow instance. Cancels a running workflow instance.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of ApiResponse (CancelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelResponse>> CancelWorkflowInstanceAsyncWithHttpInfo(string accountId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->CancelWorkflowInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorkflowInstanceManagementApi->CancelWorkflowInstance");

            var localVarPath = "/v1/accounts/{accountId}/management/instances/{instanceId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelWorkflowInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CancelResponse)this.ApiClient.Deserialize(localVarResponse, typeof(CancelResponse)));
        }


        /// <summary>
        /// Get List of Step Histories Returns a list of step history for a workflow instance
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>List<WorkflowStepHistory></returns>
        public List<WorkflowStepHistory> GetWorkflowHistory(string accountId, string instanceId)
        {
             ApiResponse<List<WorkflowStepHistory>> localVarResponse = GetWorkflowHistoryWithHttpInfo(accountId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of Step Histories Returns a list of step history for a workflow instance
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>ApiResponse of List<WorkflowStepHistory></returns>
        public ApiResponse<List<WorkflowStepHistory>> GetWorkflowHistoryWithHttpInfo(string accountId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->GetWorkflowHistory");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorkflowInstanceManagementApi->GetWorkflowHistory");

            var localVarPath = "/v1/accounts/{accountId}/management/instances/{instanceId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowStepHistory>>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (List<WorkflowStepHistory>)this.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowStepHistory>)));
        }

        /// <summary>
        /// Get List of Step Histories Returns a list of step history for a workflow instance
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of List<WorkflowStepHistory></returns>
        public async System.Threading.Tasks.Task<List<WorkflowStepHistory>> GetWorkflowHistoryAsync(string accountId, string instanceId)
        {
             ApiResponse<List<WorkflowStepHistory>> localVarResponse = await GetWorkflowHistoryAsyncWithHttpInfo(accountId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of Step Histories Returns a list of step history for a workflow instance
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of ApiResponse (List<WorkflowStepHistory>)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowStepHistory>>> GetWorkflowHistoryAsyncWithHttpInfo(string accountId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->GetWorkflowHistory");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorkflowInstanceManagementApi->GetWorkflowHistory");

            var localVarPath = "/v1/accounts/{accountId}/management/instances/{instanceId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowStepHistory>>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (List<WorkflowStepHistory>)this.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowStepHistory>)));
        }


        /// <summary>
        /// Get Workflow Instance Details Returns the details for a specific instance for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>WorkflowInstance</returns>
        public WorkflowInstance GetWorkflowInstance(string accountId, string workflowDefinitionId, string instanceId)
        {
             ApiResponse<WorkflowInstance> localVarResponse = GetWorkflowInstanceWithHttpInfo(accountId, workflowDefinitionId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Instance Details Returns the details for a specific instance for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>ApiResponse of WorkflowInstance</returns>
        public ApiResponse<WorkflowInstance> GetWorkflowInstanceWithHttpInfo(string accountId, string workflowDefinitionId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->GetWorkflowInstance");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowInstanceManagementApi->GetWorkflowInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorkflowInstanceManagementApi->GetWorkflowInstance");

            var localVarPath = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowInstance)));
        }

        /// <summary>
        /// Get Workflow Instance Details Returns the details for a specific instance for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of WorkflowInstance</returns>
        public async System.Threading.Tasks.Task<WorkflowInstance> GetWorkflowInstanceAsync(string accountId, string workflowDefinitionId, string instanceId)
        {
             ApiResponse<WorkflowInstance> localVarResponse = await GetWorkflowInstanceAsyncWithHttpInfo(accountId, workflowDefinitionId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Instance Details Returns the details for a specific instance for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="instanceId">DS Workflow Instance Id (dacId)</param>
        /// <returns>Task of ApiResponse (WorkflowInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowInstance>> GetWorkflowInstanceAsyncWithHttpInfo(string accountId, string workflowDefinitionId, string instanceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->GetWorkflowInstance");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowInstanceManagementApi->GetWorkflowInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling WorkflowInstanceManagementApi->GetWorkflowInstance");

            var localVarPath = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowInstance>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowInstance)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowInstance)));
        }


        /// <summary>
        /// Get List of Workflow Instances Returns the list of instances for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>List<WorkflowInstance></returns>
        public List<WorkflowInstance> GetWorkflowInstances(string accountId, string workflowDefinitionId)
        {
             ApiResponse<List<WorkflowInstance>> localVarResponse = GetWorkflowInstancesWithHttpInfo(accountId, workflowDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of Workflow Instances Returns the list of instances for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>ApiResponse of List<WorkflowInstance></returns>
        public ApiResponse<List<WorkflowInstance>> GetWorkflowInstancesWithHttpInfo(string accountId, string workflowDefinitionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->GetWorkflowInstances");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowInstanceManagementApi->GetWorkflowInstances");

            var localVarPath = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowInstance>>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (List<WorkflowInstance>)this.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowInstance>)));
        }

        /// <summary>
        /// Get List of Workflow Instances Returns the list of instances for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of List<WorkflowInstance></returns>
        public async System.Threading.Tasks.Task<List<WorkflowInstance>> GetWorkflowInstancesAsync(string accountId, string workflowDefinitionId)
        {
             ApiResponse<List<WorkflowInstance>> localVarResponse = await GetWorkflowInstancesAsyncWithHttpInfo(accountId, workflowDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of Workflow Instances Returns the list of instances for a deployed workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of ApiResponse (List<WorkflowInstance>)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowInstance>>> GetWorkflowInstancesAsyncWithHttpInfo(string accountId, string workflowDefinitionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowInstanceManagementApi->GetWorkflowInstances");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowInstanceManagementApi->GetWorkflowInstances");

            var localVarPath = "/v1/accounts/{accountId}/management/workflow_definitions/{workflowDefinitionId}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowInstance>>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (List<WorkflowInstance>)this.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowInstance>)));
        }

    }
}