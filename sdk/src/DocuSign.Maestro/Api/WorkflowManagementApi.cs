/* 
 * Maestro API
 *
 * Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Maestro.Client;
using DocuSign.Maestro.Model;

namespace DocuSign.Maestro.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new workflow definition.
        /// </summary>
        /// <remarks>
        /// Creates a new workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns></returns>
        NewOrUpdatedWorkflowDefinitionResponse CreateWorkflowDefinition(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body);

        /// <summary>
        /// Creates a new workflow definition.
        /// </summary>
        /// <remarks>
        /// Creates a new workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> CreateWorkflowDefinitionWithHttpInfo(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body);
        /// <summary>
        /// Deletes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Deletes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns></returns>
        WorkflowDeleteResponse DeleteWorkflowDefinition(string accountId, string workflowDefinitionId);

        /// <summary>
        /// Deletes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Deletes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WorkflowDeleteResponse> DeleteWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId);
        /// <summary>
        /// Get Workflow Definition
        /// </summary>
        /// <remarks>
        /// Returns a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        WorkflowDefinitionWithId GetWorkflowDefinition(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null);

        /// <summary>
        /// Get Workflow Definition
        /// </summary>
        /// <remarks>
        /// Returns a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WorkflowDefinitionWithId> GetWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null);
        /// <summary>
        /// Gets configuration instances
        /// </summary>
        /// <remarks>
        /// Returns a list of configuration instances for a workflow definition
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns></returns>
        GetConfigurationInstancesResponse GetWorkflowDefinitionConfigInstances(string accountId, string workflowDefinitionId);

        /// <summary>
        /// Gets configuration instances
        /// </summary>
        /// <remarks>
        /// Returns a list of configuration instances for a workflow definition
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GetConfigurationInstancesResponse> GetWorkflowDefinitionConfigInstancesWithHttpInfo(string accountId, string workflowDefinitionId);
        /// <summary>
        /// Get Workflow Definitions metadata
        /// </summary>
        /// <remarks>
        /// Returns a list of workflow definitions&#39; metadata.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        WorkflowDefinitionList GetWorkflowDefinitions(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null);

        /// <summary>
        /// Get Workflow Definitions metadata
        /// </summary>
        /// <remarks>
        /// Returns a list of workflow definitions&#39; metadata.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<WorkflowDefinitionList> GetWorkflowDefinitionsWithHttpInfo(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null);
        /// <summary>
        /// Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Publishes or unpublishes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns></returns>
        DeployResponse PublishOrUnPublishWorkflowDefinition(string accountId, string workflowDefinitionId, DeployRequest body);

        /// <summary>
        /// Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Publishes or unpublishes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DeployResponse> PublishOrUnPublishWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId, DeployRequest body);
        /// <summary>
        /// Updates a workflow definition.
        /// </summary>
        /// <remarks>
        /// Updates a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns></returns>
        NewOrUpdatedWorkflowDefinitionResponse UpdateWorkflowDefinition(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body);

        /// <summary>
        /// Updates a workflow definition.
        /// </summary>
        /// <remarks>
        /// Updates a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> UpdateWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new workflow definition.
        /// </summary>
        /// <remarks>
        /// Creates a new workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>Task of NewOrUpdatedWorkflowDefinitionResponse</returns>
        System.Threading.Tasks.Task<NewOrUpdatedWorkflowDefinitionResponse> CreateWorkflowDefinitionAsync(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body);

        /// <summary>
        /// Creates a new workflow definition.
        /// </summary>
        /// <remarks>
        /// Creates a new workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>Task of ApiResponse (NewOrUpdatedWorkflowDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>> CreateWorkflowDefinitionAsyncWithHttpInfo(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body);
        /// <summary>
        /// Deletes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Deletes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of WorkflowDeleteResponse</returns>
        System.Threading.Tasks.Task<WorkflowDeleteResponse> DeleteWorkflowDefinitionAsync(string accountId, string workflowDefinitionId);

        /// <summary>
        /// Deletes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Deletes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of ApiResponse (WorkflowDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowDeleteResponse>> DeleteWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId);
        /// <summary>
        /// Get Workflow Definition
        /// </summary>
        /// <remarks>
        /// Returns a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WorkflowDefinitionWithId</returns>
        System.Threading.Tasks.Task<WorkflowDefinitionWithId> GetWorkflowDefinitionAsync(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null);

        /// <summary>
        /// Get Workflow Definition
        /// </summary>
        /// <remarks>
        /// Returns a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WorkflowDefinitionWithId)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowDefinitionWithId>> GetWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null);
        /// <summary>
        /// Gets configuration instances
        /// </summary>
        /// <remarks>
        /// Returns a list of configuration instances for a workflow definition
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of GetConfigurationInstancesResponse</returns>
        System.Threading.Tasks.Task<GetConfigurationInstancesResponse> GetWorkflowDefinitionConfigInstancesAsync(string accountId, string workflowDefinitionId);

        /// <summary>
        /// Gets configuration instances
        /// </summary>
        /// <remarks>
        /// Returns a list of configuration instances for a workflow definition
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of ApiResponse (GetConfigurationInstancesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConfigurationInstancesResponse>> GetWorkflowDefinitionConfigInstancesAsyncWithHttpInfo(string accountId, string workflowDefinitionId);
        /// <summary>
        /// Get Workflow Definitions metadata
        /// </summary>
        /// <remarks>
        /// Returns a list of workflow definitions&#39; metadata.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WorkflowDefinitionList</returns>
        System.Threading.Tasks.Task<WorkflowDefinitionList> GetWorkflowDefinitionsAsync(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null);

        /// <summary>
        /// Get Workflow Definitions metadata
        /// </summary>
        /// <remarks>
        /// Returns a list of workflow definitions&#39; metadata.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WorkflowDefinitionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowDefinitionList>> GetWorkflowDefinitionsAsyncWithHttpInfo(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null);
        /// <summary>
        /// Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Publishes or unpublishes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>Task of DeployResponse</returns>
        System.Threading.Tasks.Task<DeployResponse> PublishOrUnPublishWorkflowDefinitionAsync(string accountId, string workflowDefinitionId, DeployRequest body);

        /// <summary>
        /// Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <remarks>
        /// Publishes or unpublishes a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>Task of ApiResponse (DeployResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeployResponse>> PublishOrUnPublishWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId, DeployRequest body);
        /// <summary>
        /// Updates a workflow definition.
        /// </summary>
        /// <remarks>
        /// Updates a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>Task of NewOrUpdatedWorkflowDefinitionResponse</returns>
        System.Threading.Tasks.Task<NewOrUpdatedWorkflowDefinitionResponse> UpdateWorkflowDefinitionAsync(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body);

        /// <summary>
        /// Updates a workflow definition.
        /// </summary>
        /// <remarks>
        /// Updates a workflow definition.
        /// </remarks>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>Task of ApiResponse (NewOrUpdatedWorkflowDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>> UpdateWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowManagementApi : IWorkflowManagementApi
    {
        private DocuSign.Maestro.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowManagementApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public WorkflowManagementApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Maestro.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Creates a new workflow definition. Creates a new workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>NewOrUpdatedWorkflowDefinitionResponse</returns>
        public NewOrUpdatedWorkflowDefinitionResponse CreateWorkflowDefinition(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
             ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> localVarResponse = CreateWorkflowDefinitionWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new workflow definition. Creates a new workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>ApiResponse of NewOrUpdatedWorkflowDefinitionResponse</returns>
        public ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> CreateWorkflowDefinitionWithHttpInfo(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->CreateWorkflowDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowManagementApi->CreateWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewOrUpdatedWorkflowDefinitionResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewOrUpdatedWorkflowDefinitionResponse)));
        }

        /// <summary>
        /// Creates a new workflow definition. Creates a new workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>Task of NewOrUpdatedWorkflowDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<NewOrUpdatedWorkflowDefinitionResponse> CreateWorkflowDefinitionAsync(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
             ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> localVarResponse = await CreateWorkflowDefinitionAsyncWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new workflow definition. Creates a new workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="body">Request Body to create a new workflow definition.</param>
        /// <returns>Task of ApiResponse (NewOrUpdatedWorkflowDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>> CreateWorkflowDefinitionAsyncWithHttpInfo(string accountId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->CreateWorkflowDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowManagementApi->CreateWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewOrUpdatedWorkflowDefinitionResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewOrUpdatedWorkflowDefinitionResponse)));
        }


        /// <summary>
        /// Deletes a workflow definition. Deletes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>WorkflowDeleteResponse</returns>
        public WorkflowDeleteResponse DeleteWorkflowDefinition(string accountId, string workflowDefinitionId)
        {
             ApiResponse<WorkflowDeleteResponse> localVarResponse = DeleteWorkflowDefinitionWithHttpInfo(accountId, workflowDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a workflow definition. Deletes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>ApiResponse of WorkflowDeleteResponse</returns>
        public ApiResponse<WorkflowDeleteResponse> DeleteWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->DeleteWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->DeleteWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowDeleteResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowDeleteResponse)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowDeleteResponse)));
        }

        /// <summary>
        /// Deletes a workflow definition. Deletes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of WorkflowDeleteResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowDeleteResponse> DeleteWorkflowDefinitionAsync(string accountId, string workflowDefinitionId)
        {
             ApiResponse<WorkflowDeleteResponse> localVarResponse = await DeleteWorkflowDefinitionAsyncWithHttpInfo(accountId, workflowDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a workflow definition. Deletes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of ApiResponse (WorkflowDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowDeleteResponse>> DeleteWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->DeleteWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->DeleteWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowDeleteResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowDeleteResponse)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowDeleteResponse)));
        }

        /// <summary>
        /// Get Workflow Definition Returns a workflow definition.
        /// </summary>
        public class GetWorkflowDefinitionOptions
        {
            /// deployed workflow definition metadata object id 
            public string lastDeployedId {get; set;}
        }

        /// <summary>
        /// Get Workflow Definition Returns a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>WorkflowDefinitionWithId</returns>
        public WorkflowDefinitionWithId GetWorkflowDefinition(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null)
        {
             ApiResponse<WorkflowDefinitionWithId> localVarResponse = GetWorkflowDefinitionWithHttpInfo(accountId, workflowDefinitionId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Definition Returns a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of WorkflowDefinitionWithId</returns>
        public ApiResponse<WorkflowDefinitionWithId> GetWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->GetWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->GetWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (options != null)
            {
                if (options.lastDeployedId != null) localVarQueryParams.Add("lastDeployedId", this.ApiClient.ParameterToString(options.lastDeployedId)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowDefinitionWithId>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowDefinitionWithId)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowDefinitionWithId)));
        }

        /// <summary>
        /// Get Workflow Definition Returns a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WorkflowDefinitionWithId</returns>
        public async System.Threading.Tasks.Task<WorkflowDefinitionWithId> GetWorkflowDefinitionAsync(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null)
        {
             ApiResponse<WorkflowDefinitionWithId> localVarResponse = await GetWorkflowDefinitionAsyncWithHttpInfo(accountId, workflowDefinitionId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Definition Returns a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WorkflowDefinitionWithId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowDefinitionWithId>> GetWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId, WorkflowManagementApi.GetWorkflowDefinitionOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->GetWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->GetWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (options != null)
            {
                if (options.lastDeployedId != null) localVarQueryParams.Add("lastDeployedId", this.ApiClient.ParameterToString(options.lastDeployedId)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowDefinitionWithId>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowDefinitionWithId)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowDefinitionWithId)));
        }


        /// <summary>
        /// Gets configuration instances Returns a list of configuration instances for a workflow definition
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>GetConfigurationInstancesResponse</returns>
        public GetConfigurationInstancesResponse GetWorkflowDefinitionConfigInstances(string accountId, string workflowDefinitionId)
        {
             ApiResponse<GetConfigurationInstancesResponse> localVarResponse = GetWorkflowDefinitionConfigInstancesWithHttpInfo(accountId, workflowDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets configuration instances Returns a list of configuration instances for a workflow definition
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>ApiResponse of GetConfigurationInstancesResponse</returns>
        public ApiResponse<GetConfigurationInstancesResponse> GetWorkflowDefinitionConfigInstancesWithHttpInfo(string accountId, string workflowDefinitionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->GetWorkflowDefinitionConfigInstances");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->GetWorkflowDefinitionConfigInstances");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowDefinitionConfigInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetConfigurationInstancesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (GetConfigurationInstancesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(GetConfigurationInstancesResponse)));
        }

        /// <summary>
        /// Gets configuration instances Returns a list of configuration instances for a workflow definition
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of GetConfigurationInstancesResponse</returns>
        public async System.Threading.Tasks.Task<GetConfigurationInstancesResponse> GetWorkflowDefinitionConfigInstancesAsync(string accountId, string workflowDefinitionId)
        {
             ApiResponse<GetConfigurationInstancesResponse> localVarResponse = await GetWorkflowDefinitionConfigInstancesAsyncWithHttpInfo(accountId, workflowDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets configuration instances Returns a list of configuration instances for a workflow definition
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <returns>Task of ApiResponse (GetConfigurationInstancesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetConfigurationInstancesResponse>> GetWorkflowDefinitionConfigInstancesAsyncWithHttpInfo(string accountId, string workflowDefinitionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->GetWorkflowDefinitionConfigInstances");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->GetWorkflowDefinitionConfigInstances");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowDefinitionConfigInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetConfigurationInstancesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (GetConfigurationInstancesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(GetConfigurationInstancesResponse)));
        }

        /// <summary>
        /// Get Workflow Definitions metadata Returns a list of workflow definitions&#39; metadata.
        /// </summary>
        public class GetWorkflowDefinitionsOptions
        {
            /// workflow definition metadata status 
            public string status {get; set;}
        }

        /// <summary>
        /// Get Workflow Definitions metadata Returns a list of workflow definitions&#39; metadata.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>WorkflowDefinitionList</returns>
        public WorkflowDefinitionList GetWorkflowDefinitions(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null)
        {
             ApiResponse<WorkflowDefinitionList> localVarResponse = GetWorkflowDefinitionsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Definitions metadata Returns a list of workflow definitions&#39; metadata.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of WorkflowDefinitionList</returns>
        public ApiResponse<WorkflowDefinitionList> GetWorkflowDefinitionsWithHttpInfo(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->GetWorkflowDefinitions");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowDefinitionList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowDefinitionList)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowDefinitionList)));
        }

        /// <summary>
        /// Get Workflow Definitions metadata Returns a list of workflow definitions&#39; metadata.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of WorkflowDefinitionList</returns>
        public async System.Threading.Tasks.Task<WorkflowDefinitionList> GetWorkflowDefinitionsAsync(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null)
        {
             ApiResponse<WorkflowDefinitionList> localVarResponse = await GetWorkflowDefinitionsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Definitions metadata Returns a list of workflow definitions&#39; metadata.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (WorkflowDefinitionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowDefinitionList>> GetWorkflowDefinitionsAsyncWithHttpInfo(string accountId, WorkflowManagementApi.GetWorkflowDefinitionsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->GetWorkflowDefinitions");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowDefinitionList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (WorkflowDefinitionList)this.ApiClient.Deserialize(localVarResponse, typeof(WorkflowDefinitionList)));
        }


        /// <summary>
        /// Publishes or unpublishes a workflow definition. Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>DeployResponse</returns>
        public DeployResponse PublishOrUnPublishWorkflowDefinition(string accountId, string workflowDefinitionId, DeployRequest body)
        {
             ApiResponse<DeployResponse> localVarResponse = PublishOrUnPublishWorkflowDefinitionWithHttpInfo(accountId, workflowDefinitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publishes or unpublishes a workflow definition. Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>ApiResponse of DeployResponse</returns>
        public ApiResponse<DeployResponse> PublishOrUnPublishWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId, DeployRequest body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->PublishOrUnPublishWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->PublishOrUnPublishWorkflowDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowManagementApi->PublishOrUnPublishWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishOrUnPublishWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DeployResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DeployResponse)));
        }

        /// <summary>
        /// Publishes or unpublishes a workflow definition. Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>Task of DeployResponse</returns>
        public async System.Threading.Tasks.Task<DeployResponse> PublishOrUnPublishWorkflowDefinitionAsync(string accountId, string workflowDefinitionId, DeployRequest body)
        {
             ApiResponse<DeployResponse> localVarResponse = await PublishOrUnPublishWorkflowDefinitionAsyncWithHttpInfo(accountId, workflowDefinitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publishes or unpublishes a workflow definition. Publishes or unpublishes a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to publish or unpublish a workflow definition.</param>
        /// <returns>Task of ApiResponse (DeployResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeployResponse>> PublishOrUnPublishWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId, DeployRequest body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->PublishOrUnPublishWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->PublishOrUnPublishWorkflowDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowManagementApi->PublishOrUnPublishWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishOrUnPublishWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DeployResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DeployResponse)));
        }


        /// <summary>
        /// Updates a workflow definition. Updates a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>NewOrUpdatedWorkflowDefinitionResponse</returns>
        public NewOrUpdatedWorkflowDefinitionResponse UpdateWorkflowDefinition(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
             ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> localVarResponse = UpdateWorkflowDefinitionWithHttpInfo(accountId, workflowDefinitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a workflow definition. Updates a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>ApiResponse of NewOrUpdatedWorkflowDefinitionResponse</returns>
        public ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> UpdateWorkflowDefinitionWithHttpInfo(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->UpdateWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->UpdateWorkflowDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowManagementApi->UpdateWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewOrUpdatedWorkflowDefinitionResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewOrUpdatedWorkflowDefinitionResponse)));
        }

        /// <summary>
        /// Updates a workflow definition. Updates a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>Task of NewOrUpdatedWorkflowDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<NewOrUpdatedWorkflowDefinitionResponse> UpdateWorkflowDefinitionAsync(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
             ApiResponse<NewOrUpdatedWorkflowDefinitionResponse> localVarResponse = await UpdateWorkflowDefinitionAsyncWithHttpInfo(accountId, workflowDefinitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a workflow definition. Updates a workflow definition.
        /// </summary>
        /// <exception cref="DocuSign.Maestro.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="workflowDefinitionId">Workflow Definition ID</param>
        /// <param name="body">Request Body to update a workflow definition.</param>
        /// <returns>Task of ApiResponse (NewOrUpdatedWorkflowDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>> UpdateWorkflowDefinitionAsyncWithHttpInfo(string accountId, string workflowDefinitionId, CreateOrUpdateWorkflowDefinitionRequestBody body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkflowManagementApi->UpdateWorkflowDefinition");
            // verify the required parameter 'workflowDefinitionId' is set
            if (workflowDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'workflowDefinitionId' when calling WorkflowManagementApi->UpdateWorkflowDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowManagementApi->UpdateWorkflowDefinition");

            var localVarPath = "aow-manage/v1.0/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (workflowDefinitionId != null) localVarPathParams.Add("workflowDefinitionId", this.ApiClient.ParameterToString(workflowDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkflowDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewOrUpdatedWorkflowDefinitionResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewOrUpdatedWorkflowDefinitionResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewOrUpdatedWorkflowDefinitionResponse)));
        }

    }
}